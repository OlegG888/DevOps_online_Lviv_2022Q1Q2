pipeline {
    agent any
    environment {
        repository = 'git@github.com:additional-repos/containers-project.git'
        registry = '343911933861.dkr.ecr.us-east-1.amazonaws.com/app'
        container = 'app'
    }
    stages {
        stage('Git checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                    url: "$repository",
                    credentialsId: 'GitHub-SSH',
                    ]]
                ])
            }
        }
        stage('Build Docker image') {
            steps {
                dir('Module_9_Final_project/app/') {
                    script {
                        dockerImage = docker.build registry
                    }
                }
            }
        }
        stage('Push to ECR') {
            steps {
                sh "aws ecr get-login-password --region us-east-1 \
                | docker login --username AWS --password-stdin $registry"
                sh "docker push $registry:latest"
            }
        }
        stage('Run container') {
            steps {
                sshPublisher(
                    publishers: [
                        sshPublisherDesc(
                            configName: 'hosting',
                            transfers: [
                                sshTransfer(
                                    cleanRemote: false,
                                    excludes: '',
                                    execCommand: """aws ecr get-login-password --region us-east-1 \
                                    | docker login --username AWS --password-stdin $registry
                                    docker pull $registry:latest
                                    docker container stop $container
                                    docker run -it --rm -d -p 80:80 --name $container $registry:latest""",
                                    execTimeout: 120000,
                                    flatten: false,
                                    makeEmptyDirs: false,
                                    noDefaultExcludes: false,
                                    patternSeparator: '[, ]+',
                                    remoteDirectory: '',
                                    remoteDirectorySDF: false,
                                    removePrefix: '',
                                    sourceFiles: ''
                                    )],
                                    usePromotionTimestamp: false,
                                    useWorkspaceInPromotion: false,
                                    verbose: true
                                )])
            }
        }
    }
}
